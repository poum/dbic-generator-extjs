# NAME

ExtJS::Generator::DBIC - ExtJS::Generator::DBIC - ExtJS MVC class generator using DBIx::Class schema

# VERSION

version 0.001001

# SYNOPSYS

    use ExtJS::Generator::DBIC;

    my $extjs_generator = ExtJS::Generator::DBIC->new(schema_name => 'My::Schema');

    $extjs_generator->model('Basic');

    # all models in one shot
    $extjs_generator->models();

    $extjs_generator->store('Another');

    # all stores in one shot
    $extjs_generator->stores();

    # all ExtJS artifacts in one shot (models & stores)
    $extjs_generator->mvc();

## DESCRIPTION

ExtJS::Generator::DBIC try to reuse all the work already done in Perl with DBIx::Class or in SQL with DBIx::Class::Loader 
to (re)generate corresponding ExtJS MVC javascript files. For now, it produces the model files with typed fields, validations rules,
and associations. The DBIx::Class::Schema namespace is reused.

## METHODS

### schema\_name

Give the name of the schema module passed as parameter

### js\_name

The javascript file namespace

### schema

Return the DBIx::Class schema object

### tables

Return an array reference of all schema table names

### order

Return an hashref of applied order to json extjs generated file

### path

The path where the js files can be retrieved / wrote

### backup

Flag to make a backup each time an existing js file already exists.
True by default

### json

JSON converter engine

### typeTranslator

DBIx::Class ExtJS type translator

### extjs\_model\_name

This method returns the ExtJS model name for a table and can be overridden
in a subclass.

### models

Generate all ExtJS models found in the DBIx::Class Schema

### model

Generate specified ExtJS model (field definition, validation rules, proxy and association). 
If a javascript model file already exists, all other keys are preserved.

If a nullable boolean field is encountered, the corresponding presence validation rule isn't
generated to avoid ExtJS transform the null values into false ones.

### store

Generate specified ExtJS store (model and proxy). 
If a javascript store file already exists, all other keys are preserved.

### stores

Generate ExtJS stores for all models found in the DBIx::Class Schema

### mvc

Generate all ExtJS artifacts for all models found in the DBIx::Class Schema

# TODO

- forms, grids, controllers & mvc global generation function
- treestore generator
- controller generator (using template)
- form generator (combo for associated data)
- grid / tree generator
- add backup / stop option if the generated file already exists
- use extjs main file for finding path to file and namespace
- use a config file
- add test for rewriting existing model files 
- add a script like the DBIx::Class::Loader one
- make a TypeTranslator for each supported Database
- SenchaCmd integration ?
- Add file and script to configure/produce the jsduck documentation
- Add inclusion, exclusion and format validation rules
- Extract Model generator in ExtJS::Generator::DBIC::Model (and Form, Grid, Tree, Controller, Store, etc.)

# AUTHORS

- Alexander Hartmaier <abraxxa@cpan.org>
- Philippe Poumaroux  <poum@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by Alexander Hartmaier.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
