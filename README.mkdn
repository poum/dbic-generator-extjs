# NAME

ExtJS::Generator::DBIC - ExtJS MVC class generator using DBIx::Class schema

# VERSION

version 0.001001

# DESCRIPTION

ExtJS::Generator::DBIC try to reuse all the work already done in Perl with DBIx::Class or in SQL with DBIx::Class::Loader 
to (re)generate corresponding ExtJS MVC javascript files. For now, it produces :

- __the model files__ : with typed fields, validations rules, and associations. The DBIx::Class::Schema namespace is reused.
- __the store files__ : with model and proxy

It handles the already existings ExtJS javascript files, trying to preserve comment and non JSON parts. If an absolute or relative path is given,
files are only looked for in this location. Otherwise try 'path'/'type'/'file', 'path'/'file', ./'type'/'file' and finally ./'file'. 
See [ExtJS::Generator::DBIC::JsFile](http://search.cpan.org/perldoc?ExtJS::Generator::DBIC::JsFile).

# SYNOPSYS

    use ExtJS::Generator::DBIC;

    my $extjs_generator = ExtJS::Generator::DBIC->new(schema_name => 'My::Schema');

    $extjs_generator->model('Basic');

    # all models in one shot
    $extjs_generator->models();

    $extjs_generator->store('Another');

    # all stores in one shot
    $extjs_generator->stores();

    # all ExtJS artifacts related to Basic model in one shot (model & store)
    $extjs_generator->mvc('Basic');

    # all ExtJS artifacts in one shot (models & stores)
    $extjs_generator->mvc();

# METHODS

## new

    my$ generator = ExtJS::Generator::DBIC->new(
      schema_name => 'My::Schema',
      js_namespace => 'My.App',
      path => 'public/js/app',
      backup => 1,
    );

### parameters

- __schema\_name__ : name of the DBIx::Schema from which the files are to be generated. __Mandatory__. Should be in @INC. 
- __js\_namespace__ : the JavaScript namespace to use. If not speficied, use schema\_name ('My::Extra::Schema' produce 'My.Extra').
- __path__ : the path where javacript files will be looked for / writed. './js/app' by default.
- __backup__ : flag to generate a backup before modifying an existing ExtJS javascript file (true by default).

## model

Generate specified ExtJS model (field definition, validation rules, proxy and association). 
If a javascript model file already exists, all other keys are preserved.

If a nullable boolean field is encountered, the corresponding presence validation rule isn't
generated to avoid ExtJS transform the null values into false ones.

### parameters

- model name for which the ExtJS model file should be generated. __Mandatory__.

### return

ref to model Perl structure

## models

Generate all ExtJS models found in the DBIx::Class Schema

### return

List of model Perl structure references

## store

Generate specified ExtJS store (model and proxy). 
If a javascript store file already exists, all other keys are preserved.

### parameters

- model name for which the ExtJS store file should be generated. __Mandatory__.

### return

ref to store Perl structure

## stores

Generate ExtJS stores for all models found in the DBIx::Class Schema

### return

List of store Perl structure references

## mvc

Generate all ExtJS artifacts for the specified model or all models found in the DBIx::Class Schema

### parameter

- model name (if no model is specified, all ExtJS artifacts will be generated)

### return

List of Perl structure references

# TODO

- forms, grids, controllers & mvc global generation function
- treestore generator
- controller generator (using template)
- form generator (combo for associated data)
- grid / tree generator
- add backup / stop option if the generated file already exists
- use extjs main file for finding path to file and namespace
- use a config file
- add a script like the DBIx::Class::Loader one
- make a TypeTranslator for each supported Database
- SenchaCmd integration ?
- Add file and script to configure/produce the jsduck documentation
- Add inclusion, exclusion and format validation rules
- Extract Model generator in ExtJS::Generator::DBIC::Engine::Model (and Form, Grid, Tree, Controller, Store, etc.)
- Hide JSON::DWIW in JsFile.pm ?
- Factorize model & store and models & stores
- Allow adding a generator (plugin) with no need to modify DBIC.pm
- add parameters to not generate validation or association in model method
- add parameter to specify proxy values in model & store
- add parameter to change extend value in mode & store
- add warning if file name and class name differ
- use a portable path separator
- try not to alter $\_
- restore initial key order
- use JavaScript::Beautifier
- generate unit test files
- add a key order option

# AUTHORS

- Alexander Hartmaier <abraxxa@cpan.org>
- Philippe Poumaroux  <poum@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by Alexander Hartmaier.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
